"use strict";(self.webpackChunkblockchain_protocols_and_distributed_applications=self.webpackChunkblockchain_protocols_and_distributed_applications||[]).push([[9724],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=i(n),m=r,y=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return n?a.createElement(y,o(o({ref:t},d),{},{components:n})):a.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:r,o[1]=c;for(var i=2;i<s;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var a=n(8168),r=(n(6540),n(5680));const s={},o="Smart Contract deployment via Rust",c={unversionedId:"Practical Sessions/Smart Contracts/cargo_deploy",id:"Practical Sessions/Smart Contracts/cargo_deploy",title:"Smart Contract deployment via Rust",description:"Let's deploy our smart contract(SC) on the blockchain. We will deploy the adder contract from the previous section.",source:"@site/docs/Practical Sessions/Smart Contracts/cargo_deploy.md",sourceDirName:"Practical Sessions/Smart Contracts",slug:"/Practical Sessions/Smart Contracts/cargo_deploy",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Smart Contracts/cargo_deploy",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"The Adder SC",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Smart Contracts/adder"},next:{title:"Smart Contract deployment via Python (mxpy)",permalink:"/blockchain-protocols-and-distributed-applications/Practical Sessions/Smart Contracts/mxpy_deploy"}},l={},i=[{value:"SC Deploy",id:"sc-deploy",level:2},{value:"SC Query",id:"sc-query",level:2},{value:"SC execute endpoint",id:"sc-execute-endpoint",level:2}],d={toc:i},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"smart-contract-deployment-via-rust"},"Smart Contract deployment via Rust"),(0,r.yg)("p",null,"Let's deploy our smart contract(SC) on the blockchain. We will deploy the ",(0,r.yg)("inlineCode",{parentName:"p"},"adder")," contract from the previous section."),(0,r.yg)("p",null,"In the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-contracts-rs/tree/main/contracts/adder/"},"repo")," there is a folder named ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-contracts-rs/tree/main/contracts/adder/interact"},"interact"),"."),(0,r.yg)("p",null,"Let's take a look into the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-contracts-rs/blob/add-potlock-contract/contracts/adder/interact/src/basic_interact_cli.rs"},"basic_interact_cli.rs")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Clone, PartialEq, Eq, Debug, Subcommand)]\npub enum InteractCliCommand {\n    #[command(name = "add", about = "Add value")]\n    Add(AddArgs),\n    #[command(name = "deploy", about = "Deploy contract")]\n    Deploy,\n    #[command(name = "feed", about = "Feed contract EGLD")]\n    Feed,\n    #[command(name = "multi-deploy", about = "Multiple deploy contracts")]\n    MultiDeploy(MultiDeployArgs),\n    #[command(name = "sum", about = "Print sum")]\n    Sum,\n}\n')),(0,r.yg)("p",null,"We have 5 arguments we can use to interact with this contract. We will ",(0,r.yg)("inlineCode",{parentName:"p"},"deploy")," for now."),(0,r.yg)("p",null,"Let's take a look into the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-contracts-rs/blob/add-potlock-contract/contracts/adder/interact/src/basic_interact.rs"},"basic_interact.rs")," file:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-Rust"},"async fn main() {\n    env_logger::init();\n\n    let mut basic_interact = AdderInteract::init().await;\n\n    let cli = basic_interact_cli::InteractCli::parse();\n    match &cli.command {\n        Some(basic_interact_cli::InteractCliCommand::Add(args)) => {\n            basic_interact.add(args.value).await;\n        }\n        Some(basic_interact_cli::InteractCliCommand::Deploy) => {\n            basic_interact.deploy().await;\n        }\n        Some(basic_interact_cli::InteractCliCommand::Feed) => {\n            basic_interact.feed_contract_egld().await;\n        }\n        Some(basic_interact_cli::InteractCliCommand::MultiDeploy(args)) => {\n            basic_interact.multi_deploy(&args.count).await;\n        }\n        Some(basic_interact_cli::InteractCliCommand::Sum) => {\n            basic_interact.print_sum().await;\n        }\n        None => {}\n    }\n}\n")),(0,r.yg)("h2",{id:"sc-deploy"},"SC Deploy"),(0,r.yg)("p",null,"The main function checks the arguments and calls the designated function.\nWe will be using ",(0,r.yg)("inlineCode",{parentName:"p"},"deploy")," async function to deploy our ",(0,r.yg)("inlineCode",{parentName:"p"},"adder")," smart contract:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'    async fn deploy(&mut self) {\n        // warning: multi deploy not yet fully supported\n        // only works with last deployed address\n\n        self.set_state().await;\n\n        let new_address = self\n            .interactor\n            .tx()\n            .from(&self.wallet_address)\n            .typed(adder_proxy::AdderProxy)\n            .init(0u32)\n            .code(&self.adder_code)\n            .returns(ReturnsNewBech32Address)\n            .prepare_async()\n            .run()\n            .await;\n\n        println!("new address: {new_address}");\n        self.state.set_adder_address(new_address);\n    }\n')),(0,r.yg)("p",null,"The interactor will make a call to the blockchain from a wallet address. This is a test address and it's referenced from the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-sdk-rs/tree/master/sdk/core/src/test_wallets"},"MultiversX Framework SDK"),"."),(0,r.yg)("p",null,"Let's deploy a contract:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ cargo run deploy\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.38s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact deploy`\nwallet address: erd1uv40ahysflse896x4ktnh6ecx43u7cmy9wnxnvcyp7deg299a4sq6vaywa\nsender's recalled nonce: 5498\n-- tx nonce: 5498\nsc deploy tx hash: 4133385c40fee378f5fc1b6318f53302750c2403a9d02e00ed727c35ba9b41ba\ndeploy address: erd1qqqqqqqqqqqqqpgqef8xmsatt4tkf5ycv538a2kme3h7dy37a4sqygv9p5\n")),(0,r.yg)("p",null,"Notice the:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"sender's nonce - how many transactions he initiated;"),(0,r.yg)("li",{parentName:"ul"},"sc deploy tx hash - the hash of the transaction where we deployed the code on a new SC;"),(0,r.yg)("li",{parentName:"ul"},"deploy address - the address where the new SC is located.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 1:")," Will this transaction show on the Explorer?"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 2:")," Will all the validators execute this transaction?"),(0,r.yg)("h2",{id:"sc-query"},"SC Query"),(0,r.yg)("p",null,"Let's read the storage from the SC:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'    async fn print_sum(&mut self) {\n        let sum = self\n            .interactor\n            .query()\n            .to(self.state.current_adder_address())\n            .typed(adder_proxy::AdderProxy)\n            .sum()\n            .returns(ReturnsResultUnmanaged)\n            .prepare_async()\n            .run()\n            .await;\n\n        println!("sum: {sum}");\n    }\n')),(0,r.yg)("p",null,"Notice that we will make a ",(0,r.yg)("inlineCode",{parentName:"p"},"query")," on the blockchain to retrieve information."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 1:")," Will this transaction show on the Explorer?"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 2:")," Will all the validators execut this transaction?"),(0,r.yg)("p",null,"Remember from the ",(0,r.yg)("inlineCode",{parentName:"p"},"main")," function and the ",(0,r.yg)("inlineCode",{parentName:"p"},"basic_interact_cli.rs")," file that we need to call the ",(0,r.yg)("inlineCode",{parentName:"p"},"sum")," parameter:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ cargo run sum\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.36s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact sum`\nsum: 0\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"sum")," storage is 0, because this was the value used by the interactor."),(0,r.yg)("h2",{id:"sc-execute-endpoint"},"SC execute endpoint"),(0,r.yg)("p",null,"Let's execute our first endpoint, the ",(0,r.yg)("inlineCode",{parentName:"p"},"add")," function:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'    async fn add(&mut self, value: u64) {\n        self.interactor\n            .tx()\n            .from(&self.wallet_address)\n            .to(self.state.current_adder_address())\n            .typed(adder_proxy::AdderProxy)\n            .add(value)\n            .prepare_async()\n            .run()\n            .await;\n\n        println!("successfully performed add");\n    }\n')),(0,r.yg)("p",null,"Notice that we use the ",(0,r.yg)("inlineCode",{parentName:"p"},"tx")," functionality of the interactor. We call the ",(0,r.yg)("inlineCode",{parentName:"p"},"add")," endpoint of the smart contract."),(0,r.yg)("p",null,"Please inspect ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/multiversx/mx-contracts-rs/blob/add-potlock-contract/contracts/adder/interact/src/basic_interact.rs"},"basic_interact.rs")," file one more time:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct AddArgs {\n    /// The value to add\n    #[arg(short = 'v', long = \"value\", verbatim_doc_comment)]\n    pub value: u64,\n}\n")),(0,r.yg)("p",null,"We must provide a parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"-v $value")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"--value $value"),". Let's try it both ways:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"$ cargo run add --value 2\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.23s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact add --value 2`\nsender's recalled nonce: 5499\n-- tx nonce: 5499\nsc call tx hash: 2b85ad0af8bed72f415abcf03ed1615ab2e72c33354400f66aafd22346d1871c\nsuccessfully performed add\n")),(0,r.yg)("p",null,"Notice:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"tx nonce - this is the sender's nonce;"),(0,r.yg)("li",{parentName:"ul"},"sc call tx hash - this is the hash of the transaction we generated;")),(0,r.yg)("p",null,"We recommend checking every action you perform:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"}," $ cargo run sum\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact sum`\nsum: 2\n")),(0,r.yg)("p",null,"Let's try the other way (",(0,r.yg)("inlineCode",{parentName:"p"},"-v $value"),"):"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"}," $ cargo run add -v 4\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.10s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact add -v 4`\nsender's recalled nonce: 5500\n-- tx nonce: 5500\nsc call tx hash: a7f07975deb4ea01b19572146adb68b1b83abd1e7ed0396475cf389641ab03b5\nsuccessfully performed add\n")),(0,r.yg)("p",null,"Let's check that the storage was incremented:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"}," $ cargo run sum\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `/Users/costincarabas/mvx/mx-contracts-rs/target/debug/basic-interact sum`\nsum: 6\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 1:")," Will these transactions (endpoint calling) show on the Explorer?"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Question 2:")," Will all the validators execute these transactions (endpoint calling)?"))}u.isMDXComponent=!0}}]);